// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
}

enum UserRole {
  SUPER_ADMIN
  AGENCY_ADMIN
  AGENT
}

enum PropertyType {
  HOUSE
  APARTMENT
  OFFICE
  LAND
}

enum TransactionType {
  SALE
  RENT
}

enum PropertyStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Currency {
  BOLIVIANOS
  DOLLARS
}

model User {
  id        String   @id @default(cuid())
  userId    String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  role      UserRole @default(AGENT)
  phone     String?
  whatsapp  String?

  // Agency relationship - Super Admins don't belong to agencies
  agency   Agency? @relation(fields: [agencyId], references: [id])
  agencyId String?

  // Only agents create properties
  properties Property[]

  @@index([userId])
  @@index([role])
  @@index([agencyId])
  @@map("users")
}

model Agency {
  id        String   @id @default(cuid())
  name      String   @unique
  logoUrl   String?
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  // Agency has many users (Agency Admins and Agents)
  users      User[]
  properties Property[]

  @@map("agencies")
}

model Property {
  id              String          @id @default(cuid())
  title           String
  description     String
  type            PropertyType
  locationState   String          @map("location_state")
  locationCity    String          @map("location_city")
  locationNeigh   String          @map("location_neighborhood")
  address         String?         // Full address
  price           Float
  currency        Currency        @default(BOLIVIANOS)
  exchangeRate    Float?          @map("exchange_rate") // Exchange rate when currency is DOLLARS
  bedrooms        Int
  bathrooms       Int
  garageSpaces    Int             @map("garage_spaces")
  squareMeters    Float           @map("square_meters")
  transactionType TransactionType @map("transaction_type")
  status          PropertyStatus  @default(PENDING)
  images          String[]        // Array of image URLs
  videos          String[]        // Array of video URLs
  features        String[]        // Additional features like "Pool", "Garden", etc.
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Property is created by an agent
  agent    User   @relation(fields: [agentId], references: [id])
  agentId  String @map("agent_id")

  // Property belongs to an agency
  agency   Agency @relation(fields: [agencyId], references: [id])
  agencyId String @map("agency_id")

  @@index([status])
  @@index([type])
  @@index([transactionType])
  @@index([locationState, locationCity])
  @@index([agentId])
  @@index([agencyId])
  @@map("properties")
}
